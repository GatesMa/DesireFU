/*
 * This file is generated by jOOQ.
*/
package cn.gatesma.desirefu.domain.db.generate.DFU_.tables;


import cn.gatesma.desirefu.domain.db.generate.DFU_.Dfu_;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Indexes;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Keys;
import cn.gatesma.desirefu.domain.db.generate.DFU_.tables.records.Accountuserrole_Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用于存储账号对应用户和角色信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accountuserrole_ extends TableImpl<Accountuserrole_Record> {

    private static final long serialVersionUID = -1438159144;

    /**
     * The reference instance of <code>dfu_.accountuserrole_</code>
     */
    public static final Accountuserrole_ ACCOUNTUSERROLE_ = new Accountuserrole_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Accountuserrole_Record> getRecordType() {
        return Accountuserrole_Record.class;
    }

    /**
     * The column <code>dfu_.accountuserrole_.accountRoleId</code>. qq对应生成的openId
     */
    public final TableField<Accountuserrole_Record, Long> ACCOUNTROLEID = createField("accountRoleId", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "qq对应生成的openId");

    /**
     * The column <code>dfu_.accountuserrole_.accountType</code>. 账号类型
     */
    public final TableField<Accountuserrole_Record, Integer> ACCOUNTTYPE = createField("accountType", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "账号类型");

    /**
     * The column <code>dfu_.accountuserrole_.userId</code>. 用户ID
     */
    public final TableField<Accountuserrole_Record, Long> USERID = createField("userId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户ID");

    /**
     * The column <code>dfu_.accountuserrole_.accountId</code>. 账号ID
     */
    public final TableField<Accountuserrole_Record, Long> ACCOUNTID = createField("accountId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "账号ID");

    /**
     * The column <code>dfu_.accountuserrole_.role</code>. 系统角色
     */
    public final TableField<Accountuserrole_Record, Integer> ROLE = createField("role", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "系统角色");

    /**
     * The column <code>dfu_.accountuserrole_.deleteStatus</code>. 删除状态，0-正常，1-删除
     */
    public final TableField<Accountuserrole_Record, Integer> DELETESTATUS = createField("deleteStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "删除状态，0-正常，1-删除");

    /**
     * The column <code>dfu_.accountuserrole_.createdTime</code>. 创建时间
     */
    public final TableField<Accountuserrole_Record, Timestamp> CREATEDTIME = createField("createdTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>dfu_.accountuserrole_.createdUserId</code>. 创建人ID
     */
    public final TableField<Accountuserrole_Record, Long> CREATEDUSERID = createField("createdUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "创建人ID");

    /**
     * The column <code>dfu_.accountuserrole_.lastModifiedUserId</code>. 最后修改人userId
     */
    public final TableField<Accountuserrole_Record, Long> LASTMODIFIEDUSERID = createField("lastModifiedUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "最后修改人userId");

    /**
     * The column <code>dfu_.accountuserrole_.lastModifiedTime</code>. CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
     */
    public final TableField<Accountuserrole_Record, Timestamp> LASTMODIFIEDTIME = createField("lastModifiedTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

    /**
     * Create a <code>dfu_.accountuserrole_</code> table reference
     */
    public Accountuserrole_() {
        this(DSL.name("accountuserrole_"), null);
    }

    /**
     * Create an aliased <code>dfu_.accountuserrole_</code> table reference
     */
    public Accountuserrole_(String alias) {
        this(DSL.name(alias), ACCOUNTUSERROLE_);
    }

    /**
     * Create an aliased <code>dfu_.accountuserrole_</code> table reference
     */
    public Accountuserrole_(Name alias) {
        this(alias, ACCOUNTUSERROLE_);
    }

    private Accountuserrole_(Name alias, Table<Accountuserrole_Record> aliased) {
        this(alias, aliased, null);
    }

    private Accountuserrole_(Name alias, Table<Accountuserrole_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "用于存储账号对应用户和角色信息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dfu_.DFU_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNTUSERROLE__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Accountuserrole_Record, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNTUSERROLE_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Accountuserrole_Record> getPrimaryKey() {
        return Keys.KEY_ACCOUNTUSERROLE__PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Accountuserrole_Record>> getKeys() {
        return Arrays.<UniqueKey<Accountuserrole_Record>>asList(Keys.KEY_ACCOUNTUSERROLE__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Accountuserrole_ as(String alias) {
        return new Accountuserrole_(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Accountuserrole_ as(Name alias) {
        return new Accountuserrole_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accountuserrole_ rename(String name) {
        return new Accountuserrole_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accountuserrole_ rename(Name name) {
        return new Accountuserrole_(name, null);
    }
}
