/*
 * This file is generated by jOOQ.
*/
package cn.gatesma.desirefu.domain.db.generate.DFU_.tables;


import cn.gatesma.desirefu.domain.db.generate.DFU_.Dfu_;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Indexes;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Keys;
import cn.gatesma.desirefu.domain.db.generate.DFU_.tables.records.Normalaccount_Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Normalaccount_ extends TableImpl<Normalaccount_Record> {

    private static final long serialVersionUID = -844096860;

    /**
     * The reference instance of <code>DFU_.NormalAccount_</code>
     */
    public static final Normalaccount_ NORMALACCOUNT_ = new Normalaccount_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Normalaccount_Record> getRecordType() {
        return Normalaccount_Record.class;
    }

    /**
     * The column <code>DFU_.NormalAccount_.accountId</code>. 帐号ID
     */
    public final TableField<Normalaccount_Record, Long> ACCOUNTID = createField("accountId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "帐号ID");

    /**
     * The column <code>DFU_.NormalAccount_.accountType</code>. 账号类型
     */
    public final TableField<Normalaccount_Record, Integer> ACCOUNTTYPE = createField("accountType", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "账号类型");

    /**
     * The column <code>DFU_.NormalAccount_.collegeId</code>. 学校Id
     */
    public final TableField<Normalaccount_Record, Integer> COLLEGEID = createField("collegeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "学校Id");

    /**
     * The column <code>DFU_.NormalAccount_.departmentId</code>. 学院Id
     */
    public final TableField<Normalaccount_Record, Integer> DEPARTMENTID = createField("departmentId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "学院Id");

    /**
     * The column <code>DFU_.NormalAccount_.major</code>. 专业
     */
    public final TableField<Normalaccount_Record, String> MAJOR = createField("major", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "专业");

    /**
     * The column <code>DFU_.NormalAccount_.createdTime</code>. 创建时间
     */
    public final TableField<Normalaccount_Record, Timestamp> CREATEDTIME = createField("createdTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>DFU_.NormalAccount_.deleteStatus</code>. 删除状态，0-正常，1-删除
     */
    public final TableField<Normalaccount_Record, Integer> DELETESTATUS = createField("deleteStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "删除状态，0-正常，1-删除");

    /**
     * The column <code>DFU_.NormalAccount_.lastModifiedUserId</code>. 最后修改人userId
     */
    public final TableField<Normalaccount_Record, Long> LASTMODIFIEDUSERID = createField("lastModifiedUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "最后修改人userId");

    /**
     * The column <code>DFU_.NormalAccount_.lastModifiedTime</code>. lastModifiedTime
     */
    public final TableField<Normalaccount_Record, Timestamp> LASTMODIFIEDTIME = createField("lastModifiedTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "lastModifiedTime");

    /**
     * Create a <code>DFU_.NormalAccount_</code> table reference
     */
    public Normalaccount_() {
        this(DSL.name("NormalAccount_"), null);
    }

    /**
     * Create an aliased <code>DFU_.NormalAccount_</code> table reference
     */
    public Normalaccount_(String alias) {
        this(DSL.name(alias), NORMALACCOUNT_);
    }

    /**
     * Create an aliased <code>DFU_.NormalAccount_</code> table reference
     */
    public Normalaccount_(Name alias) {
        this(alias, NORMALACCOUNT_);
    }

    private Normalaccount_(Name alias, Table<Normalaccount_Record> aliased) {
        this(alias, aliased, null);
    }

    private Normalaccount_(Name alias, Table<Normalaccount_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dfu_.DFU_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NORMALACCOUNT__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Normalaccount_Record> getPrimaryKey() {
        return Keys.KEY_NORMALACCOUNT__PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Normalaccount_Record>> getKeys() {
        return Arrays.<UniqueKey<Normalaccount_Record>>asList(Keys.KEY_NORMALACCOUNT__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Normalaccount_ as(String alias) {
        return new Normalaccount_(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Normalaccount_ as(Name alias) {
        return new Normalaccount_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Normalaccount_ rename(String name) {
        return new Normalaccount_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Normalaccount_ rename(Name name) {
        return new Normalaccount_(name, null);
    }
}
