/*
 * This file is generated by jOOQ.
*/
package cn.gatesma.desirefu.domain.db.generate.DFU_.tables;


import cn.gatesma.desirefu.domain.db.generate.DFU_.Dfu_;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Indexes;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Keys;
import cn.gatesma.desirefu.domain.db.generate.DFU_.tables.records.Account_Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account_ extends TableImpl<Account_Record> {

    private static final long serialVersionUID = 256677181;

    /**
     * The reference instance of <code>dfu_.account_</code>
     */
    public static final Account_ ACCOUNT_ = new Account_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Account_Record> getRecordType() {
        return Account_Record.class;
    }

    /**
     * The column <code>dfu_.account_.accountId</code>. 帐号ID
     */
    public final TableField<Account_Record, Long> ACCOUNTID = createField("accountId", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "帐号ID");

    /**
     * The column <code>dfu_.account_.accountType</code>. 账号类型
     */
    public final TableField<Account_Record, Integer> ACCOUNTTYPE = createField("accountType", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "账号类型");

    /**
     * The column <code>dfu_.account_.nickName</code>. 账号昵称
     */
    public final TableField<Account_Record, String> NICKNAME = createField("nickName", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "账号昵称");

    /**
     * The column <code>dfu_.account_.accountStatus</code>. 账号状态
     */
    public final TableField<Account_Record, Integer> ACCOUNTSTATUS = createField("accountStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "账号状态");

    /**
     * The column <code>dfu_.account_.approvalStatus</code>. 审核状态
     */
    public final TableField<Account_Record, Integer> APPROVALSTATUS = createField("approvalStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "审核状态");

    /**
     * The column <code>dfu_.account_.memo</code>. 备注
     */
    public final TableField<Account_Record, String> MEMO = createField("memo", org.jooq.impl.SQLDataType.VARCHAR(1024).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "备注");

    /**
     * The column <code>dfu_.account_.auditUserId</code>. 审核人userId
     */
    public final TableField<Account_Record, Long> AUDITUSERID = createField("auditUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "审核人userId");

    /**
     * The column <code>dfu_.account_.auditMsg</code>. 审核结果信息
     */
    public final TableField<Account_Record, String> AUDITMSG = createField("auditMsg", org.jooq.impl.SQLDataType.VARCHAR(2048).nullable(false), this, "审核结果信息");

    /**
     * The column <code>dfu_.account_.auditedTime</code>. 审核时间
     */
    public final TableField<Account_Record, Timestamp> AUDITEDTIME = createField("auditedTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "审核时间");

    /**
     * The column <code>dfu_.account_.rootUserId</code>. 创建人userId
     */
    public final TableField<Account_Record, Long> ROOTUSERID = createField("rootUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "创建人userId");

    /**
     * The column <code>dfu_.account_.createdTime</code>. 创建时间
     */
    public final TableField<Account_Record, Timestamp> CREATEDTIME = createField("createdTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>dfu_.account_.deleteStatus</code>. 删除状态，0-正常，1-删除
     */
    public final TableField<Account_Record, Integer> DELETESTATUS = createField("deleteStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "删除状态，0-正常，1-删除");

    /**
     * The column <code>dfu_.account_.lastModifiedUserId</code>. 最后修改人userId
     */
    public final TableField<Account_Record, Long> LASTMODIFIEDUSERID = createField("lastModifiedUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "最后修改人userId");

    /**
     * The column <code>dfu_.account_.lastModifiedTime</code>. lastModifiedTime
     */
    public final TableField<Account_Record, Timestamp> LASTMODIFIEDTIME = createField("lastModifiedTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "lastModifiedTime");

    /**
     * Create a <code>dfu_.account_</code> table reference
     */
    public Account_() {
        this(DSL.name("account_"), null);
    }

    /**
     * Create an aliased <code>dfu_.account_</code> table reference
     */
    public Account_(String alias) {
        this(DSL.name(alias), ACCOUNT_);
    }

    /**
     * Create an aliased <code>dfu_.account_</code> table reference
     */
    public Account_(Name alias) {
        this(alias, ACCOUNT_);
    }

    private Account_(Name alias, Table<Account_Record> aliased) {
        this(alias, aliased, null);
    }

    private Account_(Name alias, Table<Account_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dfu_.DFU_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Account_Record, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Account_Record> getPrimaryKey() {
        return Keys.KEY_ACCOUNT__PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Account_Record>> getKeys() {
        return Arrays.<UniqueKey<Account_Record>>asList(Keys.KEY_ACCOUNT__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account_ as(String alias) {
        return new Account_(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account_ as(Name alias) {
        return new Account_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account_ rename(String name) {
        return new Account_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account_ rename(Name name) {
        return new Account_(name, null);
    }
}
