/*
 * This file is generated by jOOQ.
*/
package cn.gatesma.desirefu.domain.db.generate.DFU_.tables;


import cn.gatesma.desirefu.domain.db.generate.DFU_.Dfu_;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Indexes;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Keys;
import cn.gatesma.desirefu.domain.db.generate.DFU_.tables.records.Collect_Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 收藏表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Collect_ extends TableImpl<Collect_Record> {

    private static final long serialVersionUID = -935066164;

    /**
     * The reference instance of <code>DFU_.Collect_</code>
     */
    public static final Collect_ COLLECT_ = new Collect_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Collect_Record> getRecordType() {
        return Collect_Record.class;
    }

    /**
     * The column <code>DFU_.Collect_.id</code>. Id
     */
    public final TableField<Collect_Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "Id");

    /**
     * The column <code>DFU_.Collect_.accountId</code>. AccountID
     */
    public final TableField<Collect_Record, Long> ACCOUNTID = createField("accountId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "AccountID");

    /**
     * The column <code>DFU_.Collect_.competitionId</code>. 收藏的比赛ID
     */
    public final TableField<Collect_Record, Long> COMPETITIONID = createField("competitionId", org.jooq.impl.SQLDataType.BIGINT, this, "收藏的比赛ID");

    /**
     * The column <code>DFU_.Collect_.createdTime</code>. 创建时间
     */
    public final TableField<Collect_Record, Timestamp> CREATEDTIME = createField("createdTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>DFU_.Collect_.deleteStatus</code>. 删除状态，0-正常，1-删除
     */
    public final TableField<Collect_Record, Integer> DELETESTATUS = createField("deleteStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "删除状态，0-正常，1-删除");

    /**
     * The column <code>DFU_.Collect_.lastModifiedTime</code>. lastModifiedTime
     */
    public final TableField<Collect_Record, Timestamp> LASTMODIFIEDTIME = createField("lastModifiedTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "lastModifiedTime");

    /**
     * Create a <code>DFU_.Collect_</code> table reference
     */
    public Collect_() {
        this(DSL.name("Collect_"), null);
    }

    /**
     * Create an aliased <code>DFU_.Collect_</code> table reference
     */
    public Collect_(String alias) {
        this(DSL.name(alias), COLLECT_);
    }

    /**
     * Create an aliased <code>DFU_.Collect_</code> table reference
     */
    public Collect_(Name alias) {
        this(alias, COLLECT_);
    }

    private Collect_(Name alias, Table<Collect_Record> aliased) {
        this(alias, aliased, null);
    }

    private Collect_(Name alias, Table<Collect_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "收藏表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dfu_.DFU_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COLLECT__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Collect_Record, Long> getIdentity() {
        return Keys.IDENTITY_COLLECT_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Collect_Record> getPrimaryKey() {
        return Keys.KEY_COLLECT__PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Collect_Record>> getKeys() {
        return Arrays.<UniqueKey<Collect_Record>>asList(Keys.KEY_COLLECT__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collect_ as(String alias) {
        return new Collect_(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collect_ as(Name alias) {
        return new Collect_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Collect_ rename(String name) {
        return new Collect_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Collect_ rename(Name name) {
        return new Collect_(name, null);
    }
}
