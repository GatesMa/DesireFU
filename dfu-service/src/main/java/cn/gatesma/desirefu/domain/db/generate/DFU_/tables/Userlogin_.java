/*
 * This file is generated by jOOQ.
*/
package cn.gatesma.desirefu.domain.db.generate.DFU_.tables;


import cn.gatesma.desirefu.domain.db.generate.DFU_.Dfu_;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Indexes;
import cn.gatesma.desirefu.domain.db.generate.DFU_.Keys;
import cn.gatesma.desirefu.domain.db.generate.DFU_.tables.records.Userlogin_Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户登录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userlogin_ extends TableImpl<Userlogin_Record> {

    private static final long serialVersionUID = 1452113130;

    /**
     * The reference instance of <code>dfu_.userlogin_</code>
     */
    public static final Userlogin_ USERLOGIN_ = new Userlogin_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Userlogin_Record> getRecordType() {
        return Userlogin_Record.class;
    }

    /**
     * The column <code>dfu_.userlogin_.id</code>. ID
     */
    public final TableField<Userlogin_Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>dfu_.userlogin_.userId</code>. 用户ID
     */
    public final TableField<Userlogin_Record, Long> USERID = createField("userId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户ID");

    /**
     * The column <code>dfu_.userlogin_.loginName</code>. 请求帐号时的登录名字或者Id
     */
    public final TableField<Userlogin_Record, String> LOGINNAME = createField("loginName", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "请求帐号时的登录名字或者Id");

    /**
     * The column <code>dfu_.userlogin_.loginNameType</code>. 用户登录账号类型
     */
    public final TableField<Userlogin_Record, Integer> LOGINNAMETYPE = createField("loginNameType", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户登录账号类型");

    /**
     * The column <code>dfu_.userlogin_.deleteStatus</code>. 删除状态，0-正常，1-删除
     */
    public final TableField<Userlogin_Record, Integer> DELETESTATUS = createField("deleteStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "删除状态，0-正常，1-删除");

    /**
     * The column <code>dfu_.userlogin_.createdTime</code>. 创建时间
     */
    public final TableField<Userlogin_Record, Timestamp> CREATEDTIME = createField("createdTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>dfu_.userlogin_.createdUserId</code>. 创建人ID
     */
    public final TableField<Userlogin_Record, Long> CREATEDUSERID = createField("createdUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "创建人ID");

    /**
     * The column <code>dfu_.userlogin_.lastModifiedUserId</code>. 最后修改人userId
     */
    public final TableField<Userlogin_Record, Long> LASTMODIFIEDUSERID = createField("lastModifiedUserId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "最后修改人userId");

    /**
     * The column <code>dfu_.userlogin_.lastModifiedTime</code>. CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
     */
    public final TableField<Userlogin_Record, Timestamp> LASTMODIFIEDTIME = createField("lastModifiedTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

    /**
     * Create a <code>dfu_.userlogin_</code> table reference
     */
    public Userlogin_() {
        this(DSL.name("userlogin_"), null);
    }

    /**
     * Create an aliased <code>dfu_.userlogin_</code> table reference
     */
    public Userlogin_(String alias) {
        this(DSL.name(alias), USERLOGIN_);
    }

    /**
     * Create an aliased <code>dfu_.userlogin_</code> table reference
     */
    public Userlogin_(Name alias) {
        this(alias, USERLOGIN_);
    }

    private Userlogin_(Name alias, Table<Userlogin_Record> aliased) {
        this(alias, aliased, null);
    }

    private Userlogin_(Name alias, Table<Userlogin_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "用户登录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dfu_.DFU_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERLOGIN__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Userlogin_Record, Long> getIdentity() {
        return Keys.IDENTITY_USERLOGIN_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Userlogin_Record> getPrimaryKey() {
        return Keys.KEY_USERLOGIN__PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Userlogin_Record>> getKeys() {
        return Arrays.<UniqueKey<Userlogin_Record>>asList(Keys.KEY_USERLOGIN__PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userlogin_ as(String alias) {
        return new Userlogin_(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userlogin_ as(Name alias) {
        return new Userlogin_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userlogin_ rename(String name) {
        return new Userlogin_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userlogin_ rename(Name name) {
        return new Userlogin_(name, null);
    }
}
