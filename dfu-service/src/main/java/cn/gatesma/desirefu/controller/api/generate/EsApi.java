/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.gatesma.desirefu.controller.api.generate;

import cn.gatesma.desirefu.domain.api.generate.ReturnCode;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "Es", tags={ "ES", }, description = "the Es API")
public interface EsApi {

    @ApiOperation(value = "同步一个账号信息到ES里", nickname = "syncSubNormalAccount", notes = "同步一个账号信息到ES里", response = ReturnCode.class, tags={ "ES", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReturnCode.class),
        @ApiResponse(code = 400, message = "Invalid RequestBody supplied"),
        @ApiResponse(code = 404, message = "RequestBody not found") })
    @RequestMapping(value = "/es/syncSubNormalAccount",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ReturnCode> syncSubNormalAccount(@NotNull @ApiParam(value = "账号ID，;分割", required = true) @Valid @RequestParam(value = "accountIds", required = true) String accountIds);

    @ApiOperation(value = "同步全部账号信息到ES里", nickname = "syncAllNormalAccount", notes = "同步全部账号信息到ES里", response = ReturnCode.class, tags={ "ES", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ReturnCode.class),
            @ApiResponse(code = 400, message = "Invalid RequestBody supplied"),
            @ApiResponse(code = 404, message = "RequestBody not found") })
    @RequestMapping(value = "/es/syncAllNormalAccount",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<ReturnCode> syncAllNormalAccount();

    @ApiOperation(value = "同步全部队伍信息到ES里", nickname = "syncAllOrganize", notes = "同步全部队伍信息到ES里", response = ReturnCode.class, tags={ "ES", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ReturnCode.class),
            @ApiResponse(code = 400, message = "Invalid RequestBody supplied"),
            @ApiResponse(code = 404, message = "RequestBody not found") })
    @RequestMapping(value = "/es/syncAllOrganize",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<ReturnCode> syncAllOrganize();

    @ApiOperation(value = "同步一个队伍信息到ES里", nickname = "syncSubOrganize", notes = "同步一个队伍信息到ES里", response = ReturnCode.class, tags={ "ES", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ReturnCode.class),
            @ApiResponse(code = 400, message = "Invalid RequestBody supplied"),
            @ApiResponse(code = 404, message = "RequestBody not found") })
    @RequestMapping(value = "/es/syncSubOrganize",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<ReturnCode> syncSubOrganize(@NotNull @ApiParam(value = "账号ID，;分割", required = true) @Valid @RequestParam(value = "organizeIds", required = true) String organizeIds);


}
